y = runif(n))
df$z = f(df$x)
mean(df$y <= df$z)
n = 1000
df = data.frame(x = runif(n),
y = runif(n))
df$z = f(df$x)
mean(df$y <= df$z)
n = 1000
df = data.frame(x = runif(n),
y = runif(n))
df$z = f(df$x)
mean(df$y <= df$z)
n = 1000
df = data.frame(x = runif(n),
y = runif(n))
df$z = f(df$x)
mean(df$y <= df$z)
n = 1000
df = data.frame(x = runif(n),
y = runif(n))
df$z = f(df$x)
mean(df$y <= df$z)
n = 10000
df = data.frame(x = runif(n),
y = runif(n))
df$z = f(df$x)
mean(df$y <= df$z)
n = 10000
df = data.frame(x = runif(n),
y = runif(n))
df$z = f(df$x)
mean(df$y <= df$z)
n = 10000
df = data.frame(x = runif(n),
y = runif(n))
df$z = f(df$x)
mean(df$y <= df$z)
n = 10000
df = data.frame(x = runif(n),
y = runif(n))
df$z = f(df$x)
mean(df$y <= df$z)
n = 10000
df = data.frame(x = runif(n),
y = runif(n))
df$z = f(df$x)
mean(df$y <= df$z)
rnorm(25, 3)
srs <- rnorm(25, mean = 3)
resamps <- replicate(1000, sample(srs, 25, TRUE), simplify = FALSE)
xbarstar <- sapply(resamps, mean, simplify = TRUE)
hist(xbarstar, breaks = 40, prob = TRUE)
xbarstar
curve(dnorm(x, 3, 0.2), add = TRUE)
src
srs
?replicate
srs <- rnorm(25, mean = 3)
resamps <- replicate(1000, sample(srs, 25, TRUE), simplify = FALSE)
xbarstar <- sapply(resamps, mean, simplify = TRUE)
hist(xbarstar, breaks = 40, prob = TRUE)
curve(dnorm(x, 3, 0.2), add = TRUE)
srs <- rnorm(25, mean = 3)
resamps <- replicate(1000, sample(srs, 25, TRUE), simplify = FALSE)
xbarstar <- sapply(resamps, mean, simplify = TRUE)
hist(xbarstar, breaks = 40, prob = TRUE)
curve(dnorm(x, 3, 0.2), add = TRUE)
srs <- rnorm(25, mean = 3)
resamps <- replicate(1000, sample(srs, 25, TRUE), simplify = FALSE)
xbarstar <- sapply(resamps, mean, simplify = TRUE)
hist(xbarstar, breaks = 40, prob = TRUE)
curve(dnorm(x, 3, 0.2), add = TRUE)
srs <- rnorm(25, mean = 3)
resamps <- replicate(1000, sample(srs, 25, TRUE), simplify = FALSE)
xbarstar <- sapply(resamps, mean, simplify = TRUE)
hist(xbarstar, breaks = 40, prob = TRUE)
curve(dnorm(x, 3, 0.2), add = TRUE)
srs <- rnorm(25, mean = 3)
resamps <- replicate(1000, sample(srs, 25, TRUE), simplify = FALSE)
xbarstar <- sapply(resamps, mean, simplify = TRUE)
hist(xbarstar, breaks = 40, prob = TRUE)
curve(dnorm(x, 3, 0.2), add = TRUE)
sd(xbarstar)
srs <- rnorm(25, mean = 3)
resamps <- replicate(1000, sample(srs, 25, TRUE), simplify = FALSE)
xbarstar <- sapply(resamps, mean, simplify = TRUE)
hist(xbarstar, breaks = 40, prob = TRUE)
curve(dnorm(x, 3, 0.2), add = TRUE)
srs <- rnorm(25, mean = 3)
resamps <- replicate(1000, sample(srs, 25, TRUE), simplify = FALSE)
xbarstar <- sapply(resamps, mean, simplify = TRUE)
hist(xbarstar, breaks = 40, prob = TRUE)
curve(dnorm(x, 3, 0.2), add = TRUE)
library(boot)
boot(iris$Sepal.Length, mean,  R = 1000)
?boot
blogdown::install_hugo()
gc
9
gc()
install.packages('quantmod')
library(quantmod)
getSymbols('^TWII')
library(tidyquant)
install.packages('tidyquant')
library(tidyquant)
library(tidyquant)
stockData <- c("^TWII", "2317.TW", "2330.TW", "2412.TW") %>%
tq_get(get = "stock.price", from = "2017-06-01", to = "2018-05-31")
library(dplyr)
stockData <- c("^TWII", "2317.TW", "2330.TW", "2412.TW") %>%
tq_get(get = "stock.price", from = "2017-06-01", to = "2018-05-31")
devtools::install_github("business-science/tidyquant")
gc()
gc()
library(dplyr)
library(ggplot2)
library(raster)
install.packages('raster')
library(raster)
library(rasterVis)
install.packages('rasterVis')
library(rasterVis)
library(scales)
library(rgeos)
install.packages('')
install.packages('rgeos')
gc()
library(rgeos)
nz1 <- getData('GADM', country='NZL', level=1)
nz1 <- subset(nz1,NAME_1 %in% c("Southland","Otago","West Coast"))
nz1c <- gCentroid(nz1) %>% coordinates()
dem1 <- getData("SRTM",lat=nz1c[2],lon=nz1c[1],path=datadir)
df = read.csv('Desktop/tabular_aadt_2017.csv')
gc(
)
View(df)
curve(0.5 * log((1-x)/x), from = 0, to = 1)
library(ggplot2)
ggsave('AdBoost.png', width = 3, height = 3, units = 'cm', dip = 500)
ggsave('AdBoost.png', width = 3, height = 3, units = 'cm', dpi  = 500)
getwd()
x = exp(-(seq(-2.3, 2.3, length.out = 100)))
x
?seq
y = exp((seq(-2.3, 2.3, length.out = 100)))
y
plot((seq(-2.3, 2.3, length.out = 100), x)
plot(seq(-2.3, 2.3, length.out = 100), x)
plot(seq(-2.3, 2.3, length.out = 100), x, type = 'l')
lines(y, col = 'red')
y
plot(seq(-2.3, 2.3, length.out = 100), x, type = 'l')
lines(seq(-2.3, 2.3, length.out = 100), y, col = 'red')
xgc()
gc()
plot(seq(-2.3, 2.3, length.out = 100), x, type = 'l', col = 'blue')
lines(seq(-2.3, 2.3, length.out = 100), y, col = 'red')
install.packages('corpcor')
?rnorm
x1 = seq(0, 10, length.out = 30)
x2 = seq(0, 1, , length.out = 30)
y = x1^2 + 2 * x2 + rnorm(30)
X = matrix(c(x1, x2), nrow = 30)
X
y
corpcor::pseudoinverse(X)
Y = matrix(y, nrow = 30)
corpcor::pseudoinverse(X) * Y
corpcor::pseudoinverse(X) %*% Y
data = data.frame(x1 = x1,
x2 = x2,
y = y)
model = lm(y ~ ., data)
summary(model)
x0 = rep(0, 30)
X = matrix(c(x0, x1, x2), nrow = 30)
Y = matrix(y, nrow = 30)
corpcor::pseudoinverse(X) %*% Y
x0 = rep(1, 30)
X = matrix(c(x0, x1, x2), nrow = 30)
Y = matrix(y, nrow = 30)
corpcor::pseudoinverse(X) %*% Y
data = data.frame(x1 = x1,
x2 = x2,
y = y)
model = lm(y ~ ., data)
summary(model)
x0 = rep(1, 30)
x1 = seq(0, 10, length.out = 30)
x2 = seq(0, 5, , length.out = 30)
y = x1^2 + 2 * x2 + rnorm(30)
X = matrix(c(x0, x1, x2), nrow = 30)
Y = matrix(y, nrow = 30)
corpcor::pseudoinverse(X) %*% Y
data = data.frame(x1 = x1,
x2 = x2,
y = y)
model = lm(y ~ ., data)
summary(model)
x0 = rep(1, 30)
x1 = seq(0, 10, length.out = 30)
x2 = seq(0, 100, , length.out = 30)
y = x1^2 + 2 * x2 + rnorm(30)
X = matrix(c(x0, x1, x2), nrow = 30)
Y = matrix(y, nrow = 30)
corpcor::pseudoinverse(X) %*% Y
data = data.frame(x1 = x1,
x2 = x2,
y = y)
model = lm(y ~ ., data)
summary(model)
21*seq(3, 15, 3)
install.packages('tidytuesday')
install.packages('tidytuesdayR')
transit_cost <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-01-05/transit_cost.csv')
head(transit_cost)
View(transit_cost)
unique(transit_cost$city)
unique(transit_cost$country)
transit_cost %>%
dplyr::group_by(country) %>%
dplyr::summarise(cost = mean(cost_km_millions))
library(dply)
library(dplyr)
transit_cost %>%
dplyr::group_by(country) %>%
dplyr::summarise(cost = mean(cost_km_millions))
library(ggplot2)
transit_cost %>%
dplyr::group_by(country) %>%
dplyr::summarise(cost = mean(cost_km_millions))
transit_cost %>%
dplyr::group_by(country) %>%
dplyr::summarise(cost = mean(cost_km_millions)) %>%
ggplot() +geom_bar(aes(x = country, y = cost))
transit_cost %>%
dplyr::group_by(country) %>%
dplyr::summarise(cost = mean(cost_km_millions)) %>%
ggplot() +geom_bar(aes(x = country, y = cost), stat = 'identity')
ggplot(transit_cost) + geom_point(aes(x = start_year, y = cost_km_millions))
transit_cost %>% dplyr::group_by(country) %>% dplyr::summarise(length = sum(length()))
transit_cost %>% dplyr::group_by(country) %>% dplyr::summarise(length = sum(length)
)
transit_cost %>% dplyr::group_by(country) %>% dplyr::summarise(length = sum(length)) %>% ggplot() + geom_point(aes(y = country, x = length))
transit_cost %>% dplyr::group_by(country) %>% dplyr::summarise(length = mean(length)) %>% ggplot() + geom_point(aes(y = country, x = length))
rm(list = ls())
tuition_cost <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_cost.csv')
tuition_income <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_income.csv')
salary_potential <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/salary_potential.csv')
historical_tuition <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/historical_tuition.csv')
diversity_school <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/diversity_school.csv')
View(diversity_school)
ggplot(diversity_school) + geom_bar(aes(x = total_enrollment, y = name, fill = category), stat = 'identity')
ggplot(diversity_school) + geom_bar(aes(x = enrollment, y = name, fill = category), stat = 'identity')
diversity_school %>%
dplyr::group_by(state, category) %>%
dplyr::summarise(enrollment = sum(enrollment))
diversity_school %>%
dplyr::group_by(state, category) %>%
dplyr::summarise(enrollment = sum(enrollment)) %>%
ggplot() + geom_bar(aes(x = state, y = enrollment, fill = category))
diversity_school %>%
dplyr::group_by(state, category) %>%
dplyr::summarise(enrollment = sum(enrollment)) %>%
ggplot() + geom_bar(aes(x = state, y = enrollment, fill = category), stat = 'identity')
diversity_school %>%
dplyr::group_by(state, category) %>%
dplyr::summarise(enrollment = sum(enrollment)) %>%
ggplot() + geom_bar(aes(y = state, x = enrollment, fill = category), stat = 'identity')
coffee_ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
View(coffee_ratings)
big-mac <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-12-22/big-mac.csv')
big_mac <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-12-22/big-mac.csv')
View(big_mac)
ggplot(big_mac) + geom_line(aes(x = date, y = dollar_price)) + facet_wrap(~iso_a3, scales = 'free_y')
rm(list = ls())
# Or read in the data manually
key_crop_yields <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-01/key_crop_yields.csv')
fertilizer <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-01/cereal_crop_yield_vs_fertilizer_application.csv')
tractors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-01/cereal_yields_vs_tractor_inputs_in_agriculture.csv')
land_use <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-01/land_use_vs_yield_change_in_cereal_production.csv')
arable_land <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-01/arable_land_pin.csv')
View(arable_land)
View(fertilizer)
View(land_use)
View(tractors)
View(key_crop_yields)
colnames(key_crop_yields)[4] = 'wheat'
ggplot(key_crop_yields) + geom_line(aes(x = Year, y = wheat)) + facet_wrap(~Entity, scales = 'free_y')
ggplot(key_crop_yields) + geom_line(aes(x = Year, y = wheat)) + facet_wrap(~Entity)
key_crop_yields %>% tidyr::drop_na(wheat) %>% ggplot() + geom_line(aes(x = Year, y = wheat)) + facet_wrap(~Entity)
>
key_crop_yields %>% tidyr::drop_na(wheat) %>% ggplot() + geom_line(aes(x = Year, y = wheat)) + facet_wrap(~Entity)
gc()
data = readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-12-22/big-mac.csv')
View(data)
data = readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-12-22/big-mac.csv') %>%
dplyr::select(date, name, dollar_price)
data %>%
tidyr::gather(key = name, value = dollar_price)
data %>%
tidyr::gather(key = name, value = dollar_price, -date)
data %>%
tidyr::spread(key = name, value = dollar_price, -date)
data %>%
tidyr::spread(key = name, value = dollar_price)
data %>%
tidyr::spread(key = name, value = dollar_price) %>%
t()
data %>%
tidyr::spread(key = name, value = dollar_price) %>%
data.table::transpose()
data %>%
tidyr::spread(key = name, value = dollar_price)
length(unique(data$date))
data = readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-12-22/big-mac.csv') %>%
dplyr::select(date, name, dollar_price, GDP_dollar)
data = readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-12-22/big-mac.csv') %>%
dplyr::select(date, name, dollar_price, gdp_dollar)
data %>%
dplyr::select(date, name, gdp_dollar) %>%
tidyr::spread(key = name, value = gdp_dollar) %>% View()
ggplot(data) + geom_point(aes(x = gdp_dollar, y = dollar_price))
ggplot(data) + geom_point(aes(x = gdp_dollar, y = dollar_price)) + stat_smooth(formula = y~x, method = 'lm', se = F)
ggplot(data, aes(x = gdp_dollar, y = dollar_price)) + geom_point() + stat_smooth(formula = y~x, method = 'lm', se = F)
ggplot(data, aes(x = gdp_dollar, y = dollar_price)) + geom_point() + stat_smooth(formula = y~x, method = 'lm', se = T)
ggplot(data, aes(x = gdp_dollar, y = dollar_price)) + ggrepel::geom_label_repel() + stat_smooth(formula = y~x, method = 'lm', se = T)
ggplot(data, aes(x = gdp_dollar, y = dollar_price, label = name)) + ggrepel::geom_label_repel() + stat_smooth(formula = y~x, method = 'lm', se = T)
gc()
ggplot(data, aes(x = gdp_dollar, y = dollar_price, label = name)) + ggrepel::geom_label_repel()
setwd('~/Documents/Github/tidytuesday-big-mac-index/')
gc()
library(countrycode)
library(dplyr)
library(ggplot2)
install.packages('countrycode')
library(countrycode)
countrycode(sourcevar = data$name,
origin = "country.name",
destination = "continent")
data = readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-12-22/big-mac.csv') %>%
dplyr::select(date, name, dollar_price, gdp_dollar) %>%
dplyr::mutate(continent = countrycode(sourcevar = name,
origin = "country.name",
destination = "continent"))
data = readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-12-22/big-mac.csv') %>%
dplyr::filter(name != 'Euro area') %>%
dplyr::select(date, name, dollar_price, gdp_dollar) %>%
dplyr::mutate(continent = countrycode(sourcevar = name,
origin = "country.name",
destination = "continent"))
gc()
ggplot(data) +
geom_line(aes(x = date, y = dollar_price, col = continent)) +
facet_wrap(~name, scales = 'free_y') +
scale_color_brewer(palette = 'Set1')
head(data)
ggplot(data) +
geom_line(aes(x = date, y = dollar_price, col = continent)) +
facet_wrap(~name, scales = 'free_y')
ggplot(data) +
geom_line(aes(x = date, y = dollar_price, col = continent)) +
facet_wrap(~name, scales = 'free_y') +
scale_color_brewer(palette = 'Set1')
gc()
data %>%
dplyr::group_by(name) %>%
tally()
data %>%
dplyr::group_by(name) %>%
tally() %>%
arrange(desc(n))
country = data %>%
dplyr::group_by(name) %>%
tally() %>%
dplyr::filter(n != 33)
data %>%
dplyr::filter(name %in% country$name) %>%
ggplot() +
geom_line(aes(x = date, y = dollar_price, col = continent)) +
facet_wrap(~name, scales = 'free_y') +
scale_color_brewer(palette = 'Set1')
country = data %>%
dplyr::group_by(name) %>%
tally() %>%
dplyr::filter(n == 33)
data %>%
dplyr::group_by(name) %>%
tally()
country = data %>%
dplyr::group_by(name) %>%
tally() %>%
dplyr::filter(n == 33)
data %>%
dplyr::filter(name %in% country$name) %>%
ggplot() +
geom_line(aes(x = date, y = dollar_price, col = continent)) +
facet_wrap(~name, scales = 'free_y') +
scale_color_brewer(palette = 'Set1')
gc()
country = data %>%
dplyr::group_by(name) %>%
tally()
View(country)
country = data %>%
dplyr::group_by(name) %>%
tally() %>%
dplyr::filter(n >= 10)
data %>%
dplyr::filter(name %in% country$name) %>%
ggplot() +
geom_line(aes(x = date, y = dollar_price, col = continent)) +
facet_wrap(~name, scales = 'free_y') +
scale_color_brewer(palette = 'Set1')
theme_set(theme_minimal(base_family = 'Raleway', base_size = 14))
data %>%
dplyr::filter(name %in% country$name) %>%
ggplot() +
geom_line(aes(x = date, y = dollar_price, col = continent)) +
facet_wrap(~name, scales = 'free_y') +
scale_color_brewer(palette = 'Set1')
gc()
data %>%
dplyr::filter(name %in% country$name) %>%
ggplot() +
geom_line(aes(x = date, y = dollar_price, col = continent)) +
facet_wrap(~name, scales = 'free_y') +
scale_color_brewer(palette = 'Set1') +
theme(panel.grid.minor = element_blank(),
legend.position = 'bottom',
legend.direction = 'horizontal')
range(data$date)
data %>%
dplyr::filter(name %in% country$name) %>%
ggplot(aes(x = date, y = dollar_price, col = continent)) +
geom_point(col = 'grey') +
stat_smooth(formula = y~x, method = 'lm', se = F, lwd = 0.75) +
facet_wrap(~name, scales = 'free_y') +
scale_color_brewer(palette = 'Set1') +
scale_x_date(date_breaks = '5 year', date_labels = '%Y') +
theme(panel.grid.minor = element_blank(),
legend.position = 'bottom',
legend.direction = 'horizontal')
data %>%
dplyr::filter(name %in% country$name) %>%
ggplot(aes(x = date, y = dollar_price, col = continent)) +
geom_line() +
# stat_smooth(formula = y~x, method = 'lm', se = F, lwd = 0.75) +
facet_wrap(~name, scales = 'free_y') +
scale_color_brewer(palette = 'Set1') +
scale_x_date(date_breaks = '5 year', date_labels = '%Y') +
theme(panel.grid.minor = element_blank(),
legend.position = 'bottom',
legend.direction = 'horizontal')
gc()
head(data)
ggplot(data) +
geom_point(aes(x = gdp_dollar, y = dollar_price, col = continent)) +
scale_color_brewer(palette = 'Set1')
ggplot(data) +
geom_point(aes(x = gdp_dollar, y = dollar_price, col = continent)) +
scale_color_brewer(palette = 'Set1') +
theme(panel.grid.minor = element_blank(),
legend.position = 'bottom',
legend.direction = 'horizontal')
p = ggplot(data) +
geom_point(aes(x = gdp_dollar, y = dollar_price, col = continent, frame = date)) +
scale_color_brewer(palette = 'Set1') +
theme(panel.grid.minor = element_blank(),
legend.position = 'bottom',
legend.direction = 'horizontal')
install.packages('gganimate')
library(gganimate)
p = ggplot(data) +
geom_point(aes(x = gdp_dollar, y = dollar_price, col = continent)) +
scale_color_brewer(palette = 'Set1') +
theme(panel.grid.minor = element_blank(),
legend.position = 'bottom',
legend.direction = 'horizontal') +
labs(title = 'Year: {frame_time}') +
transition_time(date) +
ease_aes('linear')
p
gc()
head(data)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
install.packages('gapminder')
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
animate(p)
install.packages('png')
install.packages('gifski')
